@page "/chat-room"
@inject IChatService ChatService
@inject IJSRuntime JSRuntime
@using Chat.SampleApp.Models;
<div class="wrapper">
    @if (_messageList == null)
    {
        <Chat.SampleApp.Components.Loader />
        <div>Loading</div>
    }
    else
    {
        <ul id="container">
            @foreach (var item in _messageList)
            {
                <li>
                    <div>
                        <div class="sender">@item.Sender</div>
                        <div class="message">@item.Content</div>
                    </div>
                    <div class="timestamp">@item.Timestamp.ToString("HH:mm")</div>
                </li>
            }
        </ul>
    }
    <div>
        <input class="input" type="text" @bind=@message />
        <button class="btn" @onclick=@SendButtonOnClick>Send</button>
    </div>
</div>
@code {
    [SupplyParameterFromQuery(Name = "chat-room-id")]
    public Guid ChatRoomId { get; set; }
    [SupplyParameterFromQuery(Name = "user-id")]
    public Guid UserId { get; set; }

    private string? message { get; set; }

    private List<Message>? _messageList;
    private CancellationTokenSource _cts = new CancellationTokenSource();
    private DotNetObjectReference<ChatRoomPage>? dotNetObjectReference;

    protected override async Task OnParametersSetAsync()
    {
        _messageList = await ChatService.GetMessageListAsync(ChatRoomId);
        await ChatService.ListenAsync(ChatRoomId, (message) =>
        {
            if (_messageList != null && !_messageList.Any(a => a.Id == message.Id))
            {
                _messageList.Add(message);
                StateHasChanged();
            }
        }, (ex) =>
        {

        }, _cts.Token);
        dotNetObjectReference = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("unloadInitialize", dotNetObjectReference);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            await JSRuntime.InvokeVoidAsync("forceScroll");
        }
    }

    private async Task SendButtonOnClick()
    {
        if (string.IsNullOrEmpty(message) || _messageList == null)
        {
            return;
        }
        Message newMessage = await ChatService.AddNewMessage(ChatRoomId, UserId, message);
        _messageList.Add(newMessage);
        message = string.Empty;
    }

    [JSInvokable]
    public void Close()
    {
        _cts.Cancel();
        _cts.Dispose();
    }
}